// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String
  email         String     @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  order         Order[]
  employee      Employee[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MenuItem {
  id            Int         @id @default(autoincrement())
  name          String
  description   String      @db.Text
  price         Decimal     @db.Decimal(65, 2)
  categoryGroup String
  insertedAt    DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  active        Boolean     @default(true)
  image         String?
  orderItems    OrderItem[]
}

model OrderItem {
  id         Int       @id @default(autoincrement())
  menuItemId Int
  orderId    Int
  quantity   Int
  note       String?   @db.Text
  insertedAt DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  menuItem   MenuItem  @relation(fields: [menuItemId], references: [id])
  order      Order     @relation(fields: [orderId], references: [id])
}

model Order {
  id         Int         @id @default(autoincrement())
  userId     String
  Status     String      @default("Submitted")
  insertedAt DateTime    @default(now())
  updatedAt  DateTime?   @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
}

model Employee {
  id         Int       @id @default(autoincrement())
  userId     String
  active     Boolean   @default(true)
  position   String
  role       String
  insertedAt DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  user       User      @relation(fields: [userId], references: [id])
}
